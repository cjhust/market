diff -Naur nginx-1.12.1/src/core/ngx_buf.c nginx-1.12.1-new/src/core/ngx_buf.c
--- nginx-1.12.1/src/core/ngx_buf.c	2017-08-01 13:48:50.059874880 +0800
+++ nginx-1.12.1-new/src/core/ngx_buf.c	2017-08-01 14:14:29.467667848 +0800
@@ -275,6 +275,22 @@
     for ( /* void */ ; in; in = in->next) {
 
         if (ngx_buf_special(in->buf)) {
+
+            if (in->buf->slice_subpool) {
+                ngx_pool_t *pool;
+
+                pool = in->buf->slice_subpool;
+                in->buf->slice_subpool = NULL;
+
+                ngx_log_error(NGX_LOG_INFO, pool->log, 0,
+                              "[slice] subrequest destroy pool: %p, "
+                              "flush:%d last_buf:%d sync:%d",
+                              pool, in->buf->flush, in->buf->last_buf,
+                              in->buf->sync);
+
+                ngx_destroy_pool(pool);
+            } 
+
             continue;
         }
 
diff -Naur nginx-1.12.1/src/core/ngx_buf.h nginx-1.12.1-new/src/core/ngx_buf.h
--- nginx-1.12.1/src/core/ngx_buf.h	2017-08-01 13:48:50.059874880 +0800
+++ nginx-1.12.1-new/src/core/ngx_buf.h	2017-08-01 14:15:19.040886222 +0800
@@ -29,6 +29,7 @@
     ngx_file_t      *file;
     ngx_buf_t       *shadow;
 
+    ngx_pool_t      *slice_subpool;
 
     /* the buf's content could be changed */
     unsigned         temporary:1;
diff -Naur nginx-1.12.1/src/http/modules/ngx_http_charset_filter_module.c nginx-1.12.1-new/src/http/modules/ngx_http_charset_filter_module.c
--- nginx-1.12.1/src/http/modules/ngx_http_charset_filter_module.c	2017-08-01 13:48:50.070874929 +0800
+++ nginx-1.12.1-new/src/http/modules/ngx_http_charset_filter_module.c	2017-08-01 14:17:43.384522071 +0800
@@ -401,7 +401,7 @@
         return NGX_DECLINED;
     }
 
-    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_charset_ctx_t));
+    ctx = ngx_pcalloc(r->main->pool, sizeof(ngx_http_charset_ctx_t));
     if (ctx == NULL) {
         return NGX_ERROR;
     }
diff -Naur nginx-1.12.1/src/http/modules/ngx_http_slice_filter_module.c nginx-1.12.1-new/src/http/modules/ngx_http_slice_filter_module.c
--- nginx-1.12.1/src/http/modules/ngx_http_slice_filter_module.c	2017-08-01 13:48:50.072874938 +0800
+++ nginx-1.12.1-new/src/http/modules/ngx_http_slice_filter_module.c	2017-08-01 15:21:22.392957501 +0800
@@ -33,6 +33,11 @@
 } ngx_http_slice_content_range_t;
 
 
+static void ngx_http_slice_subrequest_pool_reset(void *data);
+static void ngx_http_slice_subrequest_pool_cleanup(void *data);
+static ngx_int_t ngx_http_slice_subrequest(ngx_http_request_t *r, 
+    ngx_str_t *uri, ngx_str_t *args, ngx_http_request_t **psr,
+    ngx_http_post_subrequest_t *ps, ngx_uint_t flags);
 static ngx_int_t ngx_http_slice_header_filter(ngx_http_request_t *r);
 static ngx_int_t ngx_http_slice_body_filter(ngx_http_request_t *r,
     ngx_chain_t *in);
@@ -98,6 +103,211 @@
 static ngx_http_output_body_filter_pt    ngx_http_next_body_filter;
 
 
+static void
+ngx_http_slice_subrequest_pool_reset(void *data)
+{
+    ngx_pool_t                    *pool;
+    ngx_http_request_t            *r = data;
+
+    if (r != r->main && r->pool) {
+        pool = r->pool;
+        r->pool = NULL;
+
+        ngx_log_error(NGX_LOG_DEBUG, r->connection->log, 0,
+                      "[slice] subrequest reset pool: %p", pool);
+    }
+}
+
+
+static void
+ngx_http_slice_subrequest_pool_cleanup(void *data)
+{
+    ngx_pool_t                    *pool;
+    ngx_http_request_t            *r = data;
+
+    if (r != r->main && r->pool) {
+        pool = r->pool;
+        r->pool = NULL;
+
+        ngx_log_error(NGX_LOG_DEBUG, r->connection->log, 0,
+                      "[slice] subrequest cleanup pool: %p", pool);
+
+        ngx_destroy_pool(pool);
+    }
+}
+
+
+static ngx_int_t
+ngx_http_slice_subrequest(ngx_http_request_t *r,
+    ngx_str_t *uri, ngx_str_t *args, ngx_http_request_t **psr,
+    ngx_http_post_subrequest_t *ps, ngx_uint_t flags)
+{
+    ngx_pool_t                    *pool;
+    ngx_time_t                    *tp;
+    ngx_connection_t              *c;
+    ngx_pool_cleanup_t            *cln;
+    ngx_http_request_t            *sr;
+    ngx_http_core_srv_conf_t      *cscf;
+    ngx_http_postponed_request_t  *pr, *p;
+
+    if (r->subrequests == 0) {
+        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
+                      "subrequests cycle while processing \"%V\"", uri);
+        return NGX_ERROR;
+    }
+
+    if (r->main->count >= 65535 - 1000) {
+        ngx_log_error(NGX_LOG_CRIT, r->connection->log, 0,
+                      "request reference counter overflow "
+                      "while processing \"%V\"", uri);
+        return NGX_ERROR;
+    }
+
+    cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);
+
+    pool = ngx_create_pool(cscf->request_pool_size, r->connection->log);
+    if (pool == NULL) {
+        return NGX_ERROR;
+    }
+
+    ngx_log_error(NGX_LOG_DEBUG, r->main->connection->log, 0,
+                  "[slice] subrequest create pool: %p", pool);
+
+    sr = ngx_pcalloc(r->main->pool, sizeof(ngx_http_request_t));
+    if (sr == NULL) {
+        ngx_destroy_pool(pool);
+        return NGX_ERROR;
+    }
+
+    sr->signature = NGX_HTTP_MODULE;
+
+    c = r->connection;
+    sr->connection = c;
+
+    sr->pool = pool;
+
+    sr->ctx = ngx_pcalloc(sr->pool, sizeof(void *) * ngx_http_max_module);
+    if (sr->ctx == NULL) {
+        ngx_destroy_pool(sr->pool);
+        return NGX_ERROR;
+    }
+
+    if (ngx_list_init(&sr->headers_out.headers, sr->pool, 20,
+                      sizeof(ngx_table_elt_t))
+        != NGX_OK)
+    {
+        ngx_destroy_pool(sr->pool);
+        return NGX_ERROR;
+    }
+
+    sr->main_conf = cscf->ctx->main_conf;
+    sr->srv_conf = cscf->ctx->srv_conf;
+    sr->loc_conf = cscf->ctx->loc_conf;
+
+    sr->headers_in = r->headers_in;
+
+    ngx_http_clear_content_length(sr);
+    ngx_http_clear_accept_ranges(sr);
+    ngx_http_clear_last_modified(sr);
+
+    sr->request_body = r->request_body;
+
+#if (NGX_HTTP_V2)
+    sr->stream = r->stream;
+#endif
+
+    sr->method = NGX_HTTP_GET;
+    sr->http_version = r->http_version;
+
+    sr->request_line = r->request_line;
+    sr->uri = *uri;
+
+    if (args) {
+        sr->args = *args;
+    }
+
+    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, c->log, 0,
+                   "http subrequest \"%V?%V\"", uri, &sr->args);
+
+    sr->subrequest_in_memory = (flags & NGX_HTTP_SUBREQUEST_IN_MEMORY) != 0;
+    sr->waited = (flags & NGX_HTTP_SUBREQUEST_WAITED) != 0;
+
+    sr->unparsed_uri = r->unparsed_uri;
+    sr->method_name = ngx_http_core_get_method;
+    sr->http_protocol = r->http_protocol;
+
+    ngx_http_set_exten(sr);
+
+    sr->main = r->main;
+    sr->parent = r;
+    sr->post_subrequest = ps;
+    sr->read_event_handler = ngx_http_request_empty_handler;
+    sr->write_event_handler = ngx_http_handler;
+
+    if (c->data == r && r->postponed == NULL) {
+        c->data = sr;
+    }
+
+    sr->variables = r->variables;
+
+    sr->log_handler = r->log_handler;
+
+    pr = ngx_palloc(sr->pool, sizeof(ngx_http_postponed_request_t));
+    if (pr == NULL) {
+        ngx_destroy_pool(sr->pool);
+        return NGX_ERROR;
+    }
+
+    pr->request = sr;
+    pr->out = NULL;
+    pr->next = NULL;
+
+    if (r->postponed) {
+        for (p = r->postponed; p->next; p = p->next) { /* void */ }
+        p->next = pr;
+
+    } else {
+        r->postponed = pr;
+    }
+
+    sr->internal = 1;
+
+    sr->discard_body = r->discard_body;
+    sr->expect_tested = 1;
+    sr->main_filter_need_in_memory = r->main_filter_need_in_memory;
+
+    sr->uri_changes = NGX_HTTP_MAX_URI_CHANGES + 1;
+
+    tp = ngx_timeofday();
+    sr->start_sec = tp->sec;
+    sr->start_msec = tp->msec;
+
+    r->main->count++;
+
+    *psr = sr;
+    
+    cln = ngx_pool_cleanup_add(sr->pool, sizeof(ngx_http_request_t));
+    if (cln == NULL) {
+        ngx_destroy_pool(sr->pool);
+        return NGX_ERROR;
+    }
+
+    cln->handler = ngx_http_slice_subrequest_pool_reset;
+    cln->data = sr;
+
+    cln = ngx_pool_cleanup_add(r->main->pool, sizeof(ngx_http_request_t));
+    if (cln == NULL) {
+        ngx_destroy_pool(sr->pool);
+        return NGX_ERROR;
+    }
+
+    cln->handler = ngx_http_slice_subrequest_pool_cleanup;
+    cln->data = sr;
+
+    return ngx_http_post_request(sr, NULL);
+}
+
+
 static ngx_int_t
 ngx_http_slice_header_filter(ngx_http_request_t *r)
 {
@@ -218,6 +428,12 @@
     ctx = ngx_http_get_module_ctx(r, ngx_http_slice_filter_module);
 
     if (ctx == NULL || r != r->main) {
+        for (cl = in; cl && ctx; cl = cl->next) {
+            if (cl->buf->last_in_chain) {
+                cl->buf->slice_subpool = r->pool;
+            }
+        }
+
         return ngx_http_next_body_filter(r, in);
     }
 
@@ -256,7 +472,7 @@
         return rc;
     }
 
-    if (ngx_http_subrequest(r, &r->uri, &r->args, &ctx->sr, NULL,
+    if (ngx_http_slice_subrequest(r, &r->uri, &r->args, &ctx->sr, NULL,
                             NGX_HTTP_SUBREQUEST_CLONE)
         != NGX_OK)
     {
